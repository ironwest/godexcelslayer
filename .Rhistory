zenkaku_to_hankaku_num <- function(character_vector){
character_vector %>%
stringr::str_replace_all(.,"０","0") %>%
stringr::str_replace_all(.,"１","1") %>%
stringr::str_replace_all(.,"２","2") %>%
stringr::str_replace_all(.,"３","3") %>%
stringr::str_replace_all(.,"４","4") %>%
stringr::str_replace_all(.,"５","5") %>%
stringr::str_replace_all(.,"６","6") %>%
stringr::str_replace_all(.,"７","7") %>%
stringr::str_replace_all(.,"８","8") %>%
stringr::str_replace_all(.,"９","9")
}
converting_definition <- list(
"0" = "",
"1" = "",
"2" = "",
"3" = "",
"4" = "",
"5" = "",
"6" = "",
"7" = "",
"8" = "",
"9" = ""
)
converting_definition
install.packages("devtools")
install.packages("roxygen2")
.definition_numeric <- function(){
tribble(
~to, ~from,
"0", "\uFF10",
"1", "\uFF11",
"2", "\uFF12",
"3", "\uFF13",
"4", "\uFF14",
"5", "\uFF15",
"6", "\uFF16",
"7", "\uFF17",
"8", "\uFF18",
"9", "\uFF19"
)
}
definition_tibble <- .definition_numeric()
tibble
.definition_numeric <- function(){
tibble::tribble(
~to, ~from,
"0", "\uFF10",
"1", "\uFF11",
"2", "\uFF12",
"3", "\uFF13",
"4", "\uFF14",
"5", "\uFF15",
"6", "\uFF16",
"7", "\uFF17",
"8", "\uFF18",
"9", "\uFF19"
)
}
definition_tibble <- .definition_numeric()
definition_tibble
character_vec <- c("０１２４３","７４３２４５７４８９")
character_vector %>%
stringr::str_replace_all(.,"０","0") %>%
stringr::str_replace_all(.,"１","1") %>%
stringr::str_replace_all(.,"２","2") %>%
stringr::str_replace_all(.,"３","3") %>%
stringr::str_replace_all(.,"４","4") %>%
stringr::str_replace_all(.,"５","5") %>%
stringr::str_replace_all(.,"６","6") %>%
stringr::str_replace_all(.,"７","7") %>%
stringr::str_replace_all(.,"８","8") %>%
stringr::str_replace_all(.,"９","9")
library(magrittr)
character_vector %>%
stringr::str_replace_all(.,"０","0") %>%
stringr::str_replace_all(.,"１","1") %>%
stringr::str_replace_all(.,"２","2") %>%
stringr::str_replace_all(.,"３","3") %>%
stringr::str_replace_all(.,"４","4") %>%
stringr::str_replace_all(.,"５","5") %>%
stringr::str_replace_all(.,"６","6") %>%
stringr::str_replace_all(.,"７","7") %>%
stringr::str_replace_all(.,"８","8") %>%
stringr::str_replace_all(.,"９","9")
character_vector <- character_vec
character_vector %>%
stringr::str_replace_all(.,"０","0") %>%
stringr::str_replace_all(.,"１","1") %>%
stringr::str_replace_all(.,"２","2") %>%
stringr::str_replace_all(.,"３","3") %>%
stringr::str_replace_all(.,"４","4") %>%
stringr::str_replace_all(.,"５","5") %>%
stringr::str_replace_all(.,"６","6") %>%
stringr::str_replace_all(.,"７","7") %>%
stringr::str_replace_all(.,"８","8") %>%
stringr::str_replace_all(.,"９","9")
definition_tibble
stringr::str_replace_all("１２３４５３４６",definition_tibble$from[1], definition_tibble$to[1])
stringr::str_replace_all("１２３４５３４６",definition_tibble$from[2], definition_tibble$to[2])
seq(3)
map( seq(nrow(definition_tibble)), ~{
stringr::str_replace_all("１２３４５３４６",definition_tibble$from[.], definition_tibble$to[.])
})
purrr::map( seq(nrow(definition_tibble)), ~{
stringr::str_replace_all("１２３４５３４６",definition_tibble$from[.], definition_tibble$to[.])
})
purrr::reduce( seq(nrow(definition_tibble)), ~{
stringr::str_replace_all("１２３４５３４６",definition_tibble$from[.], definition_tibble$to[.])
})
character_vector
library(tidyverse)
?purrr::accumulate
# With an associative operation, the final value is always the
# same, no matter the direction. You'll find it in the last element for a
# backward (left) accumulation, and in the first element for forward
# (right) one:
1:5 %>% accumulate(`+`)
1:5 %>% accumulate(`+`, .dir = "backward")
# The final value is always equal to the equivalent reduction:
1:5 %>% reduce(`+`)
# It is easier to understand the details of the reduction with
# `paste()`.
accumulate(letters[1:5], paste, sep = ".")
# Note how the intermediary reduced values are passed to the left
# with a left reduction, and to the right otherwise:
accumulate(letters[1:5], paste, sep = ".", .dir = "backward")
reduce(seq(nrow(definition_tibble)), ~{
str_c(.x,.y)
})
accumulate(seq(nrow(definition_tibble)), ~{
str_c(.x,.y)
})
accumulate(seq(nrow(definition_tibble)), ~{
"０１２３４５６７８９" %>%
str_replace_all(pattern = definition_tibble$from[.x],
replacement = definition_tibble$to[.x])
})
accumulate(seq(nrow(definition_tibble)), ~{
print(.x)
print(.y)
"０１２３４５６７８９" %>%
str_replace_all(pattern = definition_tibble$from[.x],
replacement = definition_tibble$to[.x])
})
seq(nrow(definition_tibble)
accumulate( c(0, seq(nrow(definition_tibble))), ~{
print(.x)
print(.y)
"０１２３４５６７８９" %>%
str_replace_all(pattern = definition_tibble$from[.y],
replacement = definition_tibble$to[.y])
})
accumulate( c(0, seq(nrow(definition_tibble))), ~{
print(.x)
print(.y)
"０１２３４５６７８９" %>%
str_replace_all(pattern = definition_tibble$from[.y],
replacement = definition_tibble$to[.y])
})
reduce2
?reduce2
reduce2(letters,LETTERS, .init = "１２３３４４５６７" ~{
print(..1)
print(..2)
print(..3)
})
reduce2(letters,LETTERS, .init = "１２３３４４５６７", ~{
print(..1)
print(..2)
print(..3)
})
reduce2(letters,LETTERS, .init = "１２３３４４５６７", ~{
print(..1)
print(..2)
print(..3)
})
reduce2(letters,LETTERS, .init = "１２３３４４５６７", ~{
print("-----------------")
print(..1)
print(..2)
print(..3)
})
reduce2(letters,LETTERS, .init = "１２３３４４５６７", ~{
print("-----------------")
print(..1)
print(..2)
print(..3)
return(..1)
})
reduce2(definition_tibble$from, definition_tibble$to, .init = "１２３３４４５６７", ~{
print("-----------------")
print(..1)
print(..2)
print(..3)
return(..1)
})
reduce2(definition_tibble$from, definition_tibble$to, .init = "１２３３４４５６７", ~{
print("-----------------")
print(..1)
print(..2)
print(..3)
return(str_replace_all(..1, ..2, ..3))
})
.repeat_str_replace_all <- function(a_character, froms, tos){
purrr::reduce2(froms, tos, .init = a_character, ~{
return(stringr::str_replace_all(..1, ..2, ..3))
})
}
froms
map(c("１２３はあた","５７２８.423","文字列も１２３４５５０"), ~{
.repeat_str_replace_all(a_character = ., froms = definition_tibble$from, tos = definition_tibble$to)
})
str_replace_all_repeats <- function(character_vector, froms, tos){
purrr::map_chr(character_vector, ~{
.repeat_str_replace_all(a_character = ., froms = froms, tos = tos)
})
}
.definition_numeric <- function(){
tibble::tribble(
~to, ~from,
"0", "\uFF10",
"1", "\uFF11",
"2", "\uFF12",
"3", "\uFF13",
"4", "\uFF14",
"5", "\uFF15",
"6", "\uFF16",
"7", "\uFF17",
"8", "\uFF18",
"9", "\uFF19"
)
}
froms <- .definition_numeric()$from
froms
#' Internal function for convert zenkaku to hankaku
#'
#' This function will be used with in functions of this package
#' Not intended to call by package user.
#' @import tibble
.definition_numeric <- function(){
tibble::tribble(
~to, ~from,
"0", "\uFF10",
"1", "\uFF11",
"2", "\uFF12",
"3", "\uFF13",
"4", "\uFF14",
"5", "\uFF15",
"6", "\uFF16",
"7", "\uFF17",
"8", "\uFF18",
"9", "\uFF19"
)
}
#' Internal function for applying str_replace_all to a single character.
#'
#' @param a_character Single character.
#' @param froms vector containing argument for pattern in str_replace_all.
#' @param tos vector containing argument for replace in str_replace_all.
.repeat_str_replace_all <- function(a_character, froms, tos){
purrr::reduce2(froms, tos, .init = a_character, ~{
return(stringr::str_replace_all(..1, ..2, ..3))
})
}
#' Function for apply multiply str_reoplace_all condition to character vector
#'
#' This is wrapper for str_replace_all to apply multiple condition to the character vector
#'
#' @param character_vector Vector of character.
#' @param froms Vector containing argument for pattern in str_replace_all
#' @param tos Vector containing argument for replace in str_replace_all
str_replace_all_repeats <- function(character_vector, froms, tos){
purrr::map_chr(character_vector, ~{
.repeat_str_replace_all(a_character = ., froms = froms, tos = tos)
})
}
#' Convert zenkaku number to hankaku number.
#'
#' This function convert zenkaku number to hankaku number within string vector.
#'
#' @param character_vector A character vector include zenkaku number character.
#' @import stringr
#' @import magrittr
zenkaku_to_hankaku_num <- function(character_vector){
froms <- .definition_numeric()$from
str_replace_all_repeats(character_vector = character_vector,
froms = .definition_numeric()$from,
tos   = .definition_numeric()$to )
}
dat <- tibble(a = c("１２３４","４５６７８","９０１２４"))
dat
dat %>%
mutate(new = zenkaku_to_hankaku_num(a))
packageVersion("tidyr")
packageVersion("tibble")
packageVersion("magittr")
packageVersion("magrittr")
packageVersion("dplyr")
stringr %>% packageVersion()
packageVersion("stringr")
packageVersion("purrr")
library(godexcelslayer)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenize()
.definition_numeric()
library(godexcelslayer)
godexcelslayer::zenka
godexcelslayer::warn()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(godexcelslayer)
